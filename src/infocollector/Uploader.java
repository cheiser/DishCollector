/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package infocollector;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Mattis
 */
public class Uploader extends javax.swing.JFrame {

    /**
     * Creates new form Uploader
     */
    public Uploader() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        singleFileBtn = new javax.swing.JButton();
        allBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        title.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("UPLOADER");

        singleFileBtn.setText("upload single file");
        singleFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleFileBtnActionPerformed(evt);
            }
        });

        allBtn.setText("upload all");
        allBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(singleFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(allBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(singleFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(allBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void singleFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleFileBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser(DishGUI.folderName);
        File file;

        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "MAT files", "MAT");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showDialog(null, "upload file");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: "
                    + fileChooser.getSelectedFile().getName());
            file = fileChooser.getSelectedFile();
            String fileName = file.getName(); // abstract name
            if (fileName.substring(fileName.length() - 3, fileName.length()).equals(DishGUI.fileExtensionName)) {
                System.out.println("correct type");
            } else {
                JOptionPane.showMessageDialog(null, "wrong filetype does not upload");
                return;
            }
            readEntireFile(file.getAbsolutePath());
        }
        // TODO: actually upload the file
    }//GEN-LAST:event_singleFileBtnActionPerformed

    private void allBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allBtnActionPerformed
        // TODO add your handling code here:
        // TODO: ladda upp alla filerna som ligger under MATFolder och flytta dem till uploaded foldern

        File folder = new File(DishGUI.folderName);
        if (folder.list() != null && folder.list().length == 0) {
            JOptionPane.showMessageDialog(null, "MATFolder is empty");
            return;
        } else if (folder.list() == null) {
            JOptionPane.showMessageDialog(null, "is not a folder or does not exist");
            return;
        } else {
            JOptionPane.showMessageDialog(null, "uploading data");
            ArrayList<RestaurantInfo> temp = readDirectory(folder); // to upload subfolders aswell use function readDirectoryAndSubF here
            if (uploadData(temp)) {
                JOptionPane.showMessageDialog(null, "upload done");
            } else {
                JOptionPane.showMessageDialog(null, "error at upload");
            }
        }

    }//GEN-LAST:event_allBtnActionPerformed

    private boolean uploadData(ArrayList<RestaurantInfo> restInfos) {
        System.out.println("uploading data: ");
        for (RestaurantInfo tempRestI : restInfos) {
            printAllData(tempRestI);
        }
        return true;
    }

    private void printAllData(RestaurantInfo restInfo) {
        System.out.println("restName: " + restInfo.getRestaurantName() + "\n" + "location: " + restInfo.getLocation());
        for (DishInfo tempDishInfo : restInfo.getDishInfos()) {
            System.out.println("dishType = " + tempDishInfo.getDishType());
            for (Dish tempDish : tempDishInfo.getDishInfo()) {
                System.out.println("dishName: " + tempDish.getDishName());
                System.out.println("dishDesc: " + tempDish.getDishDescription());
                System.out.println("dishprice: " + tempDish.getDishPrice());
            }
        }

    }

    /**
     * reads an entire folder containing .MAT files and returns the
     * RestaurantInfos as an ArrayList
     *
     * @param folder
     * @return
     */
    private ArrayList<RestaurantInfo> readDirectory(File folder) {
        File[] children = folder.listFiles();
        ArrayList<RestaurantInfo> restInfos = new ArrayList<RestaurantInfo>();
        for (File child : children) {
            if (!child.isDirectory()) {
                if (child.getName().substring(child.getName().length() - 3, child.getName().length()).equals(DishGUI.fileExtensionName)) {
                    System.out.println("correct type");
                    restInfos.add(readEntireFile(child.getAbsolutePath()));
                }
                
            }
        }
        return restInfos;
    }

    /**
     * reads an entire folder and it's subfolders containing .MAT files and
     * returns the RestaurantInfos as an ArrayList
     *
     * @param folder
     * @return
     */
    private ArrayList<RestaurantInfo> readDirectoryAndSubF(File folder) {
        File[] children = folder.listFiles();
        ArrayList<RestaurantInfo> restInfos = new ArrayList<RestaurantInfo>();
        for (File child : children) {
            if (!child.isDirectory()) {
                if (child.getName().substring(child.getName().length() - 3, child.getName().length()).equals(DishGUI.fileExtensionName)) {
                    System.out.println("correct type");
                    restInfos.add(readEntireFile(child.getAbsolutePath()));
                }
            } else {
                ArrayList<RestaurantInfo> temp = readDirectoryAndSubF(child);
                addRestInfosToAL(restInfos, temp);
            }
        }

        return restInfos;
    }

    /*
     * used by readDirectoryAndSubF(File Folder) to copy the temp to the real
     * array
     */
    private void addRestInfosToAL(ArrayList<RestaurantInfo> restInfos, ArrayList<RestaurantInfo> tempInfos) {
        Iterator iterator = tempInfos.iterator();
        while (iterator.hasNext()) {
            restInfos.add((RestaurantInfo) (iterator.next()));
        }
    }

    private RestaurantInfo readEntireFile(String fileName) {
        RestaurantInfo restInfo = null;
        try {
            System.out.println("trying to open file: " + fileName);
            restInfo = (RestaurantInfo) (new ObjectFileIO(fileName)).readFile();
        } catch (Exception ex) {
            System.out.println("exception");
            return null;
        }

        System.out.println("restName: " + restInfo.getRestaurantName());
        return restInfo;
    }

    @Deprecated
    private DishInfo extractData() {
        DishInfo temp = new DishInfo(readDishType());
        Dish dish = readSingleDish();
        while (dish != null) {
            temp.addDish(dish);
            dish = readSingleDish();
        }
        return temp;
    }

    @Deprecated
    private String readDishType() {
        return "";
    }

    @Deprecated
    private Dish readSingleDish() {
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Uploader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Uploader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Uploader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Uploader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Uploader().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton singleFileBtn;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
